// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  SubscriptionsReadSubscriptionsData,
  SubscriptionsReadSubscriptionsResponse,
  SubscriptionsCreateSubscriptionData,
  SubscriptionsCreateSubscriptionResponse,
  SubscriptionsReadSubscriptionData,
  SubscriptionsReadSubscriptionResponse,
  SubscriptionsUpdateSubscriptionData,
  SubscriptionsUpdateSubscriptionResponse,
  SubscriptionsDeleteSubscriptionData,
  SubscriptionsDeleteSubscriptionResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginConfirmEmailData,
  LoginConfirmEmailResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersPreferencesUpdateData,
  UsersPreferencesUpdateResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
  UserSessionsUpdateCurrentSessionData,
  UserSessionsUpdateCurrentSessionResponse,
  UserSessionsCreateUserSessionData,
  UserSessionsCreateUserSessionResponse,
  UserSessionsReadUserSessionsResponse,
  LoginResendConfirmationData,
  LoginResendConfirmationResponse,
  LoginSetupPasswordData,
  LoginSetupPasswordResponse,
} from "./types.gen"

const API_URL = import.meta.env.VITE_API_URL;

export class SubscriptionsService {
  /**
   * Read Subscriptions
   * Retrieve subscriptions.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns SubscriptionsPublic Successful Response
   * @throws ApiError
   */
  public static readSubscriptions(
    data: SubscriptionsReadSubscriptionsData = {},
  ): CancelablePromise<SubscriptionsReadSubscriptionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: API_URL + "/api/v1/subscriptions/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Subscription
   * Create new subscription.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionPublic Successful Response
   * @throws ApiError
   */
  public static createSubscription(
    data: SubscriptionsCreateSubscriptionData,
  ): CancelablePromise<SubscriptionsCreateSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/subscriptions/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Subscription
   * Get subscription by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns SubscriptionPublic Successful Response
   * @throws ApiError
   */
  public static readSubscription(
    data: SubscriptionsReadSubscriptionData,
  ): CancelablePromise<SubscriptionsReadSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: API_URL + "/api/v1/subscriptions/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Subscription
   * Update an subscription.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns SubscriptionPublic Successful Response
   * @throws ApiError
   */
  public static updateSubscription(
    data: SubscriptionsUpdateSubscriptionData,
  ): CancelablePromise<SubscriptionsUpdateSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: API_URL + "/api/v1/subscriptions/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Subscription
   * Delete an subscription.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteSubscription(
    data: SubscriptionsDeleteSubscriptionData,
  ): CancelablePromise<SubscriptionsDeleteSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: API_URL + "/api/v1/subscriptions/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Resend Confirmation
   * Resend confirmation email
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resendConfirmation(
    data: LoginResendConfirmationData,
  ): CancelablePromise<LoginResendConfirmationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/resend-confirmation",
      query: {
        email: data.email,
      },
      mediaType: "application/json",
    })
  }

  /**
   * Confirm Email
   * Confirm email
   * @param data The data for the request.
   * @param data.token
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static confirmEmail(
    data: LoginConfirmEmailData,
  ): CancelablePromise<LoginConfirmEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/confirm-email/{token}",
      path: {
        token: data.token,
      },
    })
  }

  /**
   * Setup Password
   * Setup password
   * @param data The data for the request.
   * @param data.token
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static setupPassword(
    data: LoginSetupPasswordData,
  ): CancelablePromise<LoginSetupPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/auth/setup-password",
      body: data,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: API_URL + "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Profile
   * Get current user.
   * @returns UserProfile Successful Response
   * @throws ApiError
   */
  public static readUserProfile(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: API_URL + "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: API_URL + "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: API_URL + "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: API_URL + "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: API_URL + "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: API_URL + "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: API_URL + "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User Preferences
   * Update own user preferences.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserPreferences(
    data: UsersPreferencesUpdateData,
  ): CancelablePromise<UsersPreferencesUpdateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: API_URL + "/api/v1/users/me/preferences",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UserSessionsService {
  /**
   * Update Current Session
   * Update the current session for a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.isCurrent
   * @returns Message Successful Response
   * @throws ApiError
   */ 
  public static updateCurrentSession(
    data: UserSessionsUpdateCurrentSessionData,
  ): CancelablePromise<UserSessionsUpdateCurrentSessionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: API_URL + "/api/v1/users/user-sessions",
      body: data,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User Session
   * Create a new user session.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserSessionPublic Successful Response
   * @throws ApiError
   */
  public static createUserSession(
    data: UserSessionsCreateUserSessionData,
  ): CancelablePromise<UserSessionsCreateUserSessionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/users/user-sessions",
      body: data,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Sessions
   * Get all user sessions.
   * @returns UserSessionPublic Successful Response
   * @throws ApiError
   */
  public static readUserSessions(): CancelablePromise<UserSessionsReadUserSessionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: API_URL + "/api/v1/users/user-sessions",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: API_URL + "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: API_URL + "/api/v1/utils/health-check/",
    })
  }
}
